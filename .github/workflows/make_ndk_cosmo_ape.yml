name: Make NDK APE
run-name: Make NDK-r${{inputs.ndk_version}} with llvm-${{inputs.llvm_version}}-ape
on:
  workflow_dispatch:
    inputs:
      ndk_version:
        description: "NDK Release version:"
        default: '28'
        required: true
        type: string
      llvm_version:
        description: "LLVM Release version:"
        default: '19.1.7'
        required: true
        type: string

jobs:
  build_llvm:
    uses: ./.github/workflows/build_llvm.yml
    with:
      version: ${{inputs.llvm_version}}

  make:
    needs: [build_llvm]
    name: Make NDK APE
    runs-on: ubuntu-latest
    steps:
      - name: Get NDK
        run: curl -LkSs https://dl.google.com/android/repository/android-ndk-r${{inputs.ndk_version}}-linux.zip >ndk.zip && unzip -q ndk.zip

      - name: Get LLVM
        uses: actions/download-artifact@v4
        with:
          name: clang+clang-tools-extra+lld-${{inputs.llvm_version}}-ape
          merge-multiple: true

      - uses: geekyeggo/delete-artifact@v5.1.0
        with:
          name: clang+clang-tools-extra+lld-${{inputs.llvm_version}}-ape

      - name: Extract LLVM
        run: tar -xJf clang+clang-tools-extra+lld-${{inputs.llvm_version}}-ape.tar.xz

      - name: Make NDK APE
        run: |
          NDK="${PWD}/android-ndk-r${{inputs.ndk_version}}"
          HOST_TOOLCHAIN="${PWD}/clang+clang-tools-extra+lld-${{inputs.llvm_version}}-ape"
          NDK_TOOLCHAIN="${NDK}/toolchains/llvm/prebuilt/linux-x86_64"

          find "${NDK_TOOLCHAIN}/bin" -type f | while IFS= read -r file; do
              bname="$(basename "${file}")"
              if [ -f "${HOST_TOOLCHAIN}/bin/${bname}" ] && file "${file}" | grep -q 'ELF'; then
                  echo "Replacing ${bname}"
                  cp "${HOST_TOOLCHAIN}/bin/${bname}" "${file}"
              elif file "${file}" | grep -q 'Bourne-Again shell script'; then
                  echo "Replacing SheBang ${bname}"
                  sed -i 's,#!/usr/bin/env bash,#!/usr/bin/env sh,' "${file}"
              fi
          done

          ## Fix: ERROR: Unknown host CPU architecture: aarch64
          sed -i 's/arm64)/arm64|aarch64)/' "${NDK}/build/tools/ndk_bin_common.sh"

          ## Remove unused resource
          rm -rf "${NDK_TOOLCHAIN}/python3"
          rm -rf "${NDK_TOOLCHAIN}/musl"
          find "${NDK_TOOLCHAIN}/lib" -maxdepth 1 -mindepth 1 -not -name clang -exec rm -rf {} \;
          find "${NDK_TOOLCHAIN}" -maxdepth 5 -path "*/lib/clang/[0-9][0-9]/lib/*" -not -name linux -exec rm -rf {} \;

          curl -LkSs https://cosmo.zip/pub/cosmos/bin/make > "${NDK}/prebuilt/linux-x86_64/bin/make" && chmod +x "${NDK}/prebuilt/linux-x86_64/bin/make"
          mkdir -p "${NDK_TOOLCHAIN}/python3/bin"
          curl -LkSs https://cosmo.zip/pub/cosmos/bin/python >"${NDK_TOOLCHAIN}/python3/bin/python3" && chmod +x "${NDK_TOOLCHAIN}/python3/bin/python3"

          cd ${NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin
          ln -s clang-19 clang.exe
          ln -s clang-19 clang++.exe
          for file in llvm-*; do
             ln -s "$file" "$file.exe"
          done
          cd ..

          mv ${NDK}/prebuilt/linux-x86_64 ${NDK}/prebuilt/cosmo-universal
          mv ${NDK}/toolchains/llvm/prebuilt/linux-x86_64 ${NDK}/toolchains/llvm/prebuilt/cosmo-universal

          cd ${NDK}/toolchains/llvm/prebuilt

          ln -s cosmo-universal linux-x86_64
          ln -s cosmo-universal linux-arm64
          ln -s cosmo-universal windows-x86_64
          ln -s cosmo-universal windows-arm64
          ln -s cosmo-universal darwin-x86_64
          ln -s cosmo-universal darwin-arm64

          cd ${NDK}/prebuilt

          ln -s cosmo-universal linux-x86_64
          ln -s cosmo-universal linux-arm64
          ln -s cosmo-universal windows-x86_64
          ln -s cosmo-universal windows-arm64
          ln -s cosmo-universal darwin-x86_64
          ln -s cosmo-universal darwin-arm64

          rm -rf ${NDK}/shader-tools # TODO: maybe build?

      - name: Archive
        run: tar -cvhf android-ndk-r${{inputs.ndk_version}}.tar android-ndk-r${{inputs.ndk_version}}.tar

      - uses: actions/upload-artifact@v4
        with:
          name: android-ndk-r${{inputs.ndk_version}}.tar
          path: android-ndk-r${{inputs.ndk_version}}.tar

  release:
    needs: make
    name: Release
    permissions:
      contents: write
      actions: write
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
      
    - name: Compress
      run: |
        xz -T0 android-ndk-r${{inputs.ndk_version}}.tar

    - name: Release
      uses: ncipollo/release-action@v1.15.0
      with:
        tag: "r${{inputs.ndk_version}}"
        artifacts: android-ndk-r${{inputs.ndk_version}}.tar.xz
        allowUpdates: true
        replacesArtifacts: true
        body: |
          [action](${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}})
